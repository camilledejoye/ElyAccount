<?php

namespace ElyAccount\Tests\BankAccount\Event;

use ElyAccount\BankAccount\AccountNumber;
use ElyAccount\BankAccount\Event\CheckingAccountWasOpen;
use ElyAccount\Client\ClientId;
use Money\Currency;
use PHPUnit\Framework\TestCase;
use ReflectionClass;

class CheckingAccountWasOpenTest extends TestCase
{
    /**
     * @var CheckingAccountWasOpen
     */
    private $sut;

    /**
     * @var ClientId
     */
    private $ownerId;

    /**
     * @var Currency
     */
    private $currency;

    protected function setUp()
    {
        $this->ownerId = $this->createAnOwnerId();
        $this->currency = $this->createACurrency();
        $this->sut = CheckingAccountWasOpen::forAClient(
            $this->ownerId,
            $this->createAnAccountNumber(),
            $this->currency
        );
    }

    /**
     * @test
     */
    public function shouldInitializeTheEvent()
    {
        $sut = $this->createPartialMock(CheckingAccountWasOpen::class, ['initializeTheEvent']);
        $sut->expects($this->once())
            ->method('initializeTheEvent');

        $reflection = new ReflectionClass($sut);
        $constructor = $reflection->getConstructor();
        $constructor->setAccessible(true);
        $constructor->invokeArgs($sut, [
            $this->createAnOwnerId(),
            $this->createAnAccountNumber(),
            $this->createACurrency()
        ]);
    }

    /**
     * @test
     */
    public function shouldProvideAnOwnerId()
    {
        $this->assertSame($this->ownerId, $this->sut->ownerId());
    }

    /**
     * @test
     */
    public function shouldProvideACurrency()
    {
        $this->assertSame($this->currency, $this->sut->currency());
    }

    private function createAnOwnerId(): ClientId
    {
        return $this->createMock(ClientId::class);
    }

    private function createAnAccountNumber(): AccountNumber
    {
        return $this->createMock(AccountNumber::class);
    }

    private function createACurrency(): Currency
    {
        return new Currency('EUR');
    }
}
